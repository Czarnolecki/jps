package pl.edu.pjwstk.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;
import edu.pjwstk.jps.ast.IExpression;
import edu.pjwstk.jps.ast.terminal.*;
import edu.pjwstk.jps.ast.unary.*;
import pl.edu.pjwstk.parser.ParserException;
import pl.edu.pjwstk.ast.auxname.*;
import pl.edu.pjwstk.ast.binary.*;
import pl.edu.pjwstk.ast.terminal.*;
import pl.edu.pjwstk.ast.unary.*;



parser code {:
	public Lexer lexer;
	private String expr;
	public IExpression RESULT;


	public ParserCup(String expr) {
		this.expr = expr;
	}



	void setResult(IExpression exp) {
		this.RESULT = exp;
	}

:};

init with {: 	    lexer = new Lexer(new StringReader(expr)); :};
scan with {:		return lexer.next_token(); :};


terminal Integer INTEGER_LITERAL;
terminal Double DOUBLE_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal String IDENTIFIER;
terminal String GROUPBY_ASC;
terminal String GROUPBY_DESC;

terminal String STRING_LITERAL;
terminal Character CHAR_LITERAL;

terminal String PLUS;
terminal String MINUS;
terminal String MULTIPLY;
terminal String DIVIDE;
terminal String MODULO;
terminal String MORE;
terminal String EQUALS;
terminal String NOT_EQUALS;
terminal String UNIQUE;
terminal String UNION;
terminal String SUM;
terminal String AVG;
terminal String COUNT;
terminal String OR;
terminal String AND;
terminal String LESS;
terminal String MORE_OR_EQUAL;
terminal String LESS_OR_EQUAL;
terminal String MIN;
terminal String MAX;
terminal String COMA;
terminal String IN;
terminal String DOT;
terminal String WHERE;
terminal String DEREF;
terminal String BAG;
terminal String SEQUENCE;
terminal String STRUCT;
terminal String ORDER_BY;
terminal String CLOSE_BY;

terminal String FORALL;
terminal String FORANY;

terminal String JOIN;
terminal String AS;
terminal String GROUP_AS;
terminal String NOT;
terminal String EXISTS;
terminal String MINUS_FUNCTION;
terminal String INTERSECT;
terminal String LEFT_ROUND_BRACKET;
terminal String RIGHT_ROUND_BRACKET;
terminal String LEFT_CURLY_BRACKET;
terminal String RIGHT_CURLY_BRACKET;
terminal String LEFT_BOX_BRACKET;
terminal String RIGHT_BOX_BRACKET;

terminal String SEMICOLON;

terminal String FOREACH;
terminal String NEW;
terminal String RANGE;
terminal String QUESTION_MARK;
terminal String COLON;
terminal String INSTANCEOF;
terminal String USING;


non terminal IExpression goal;
non terminal IExpression expr;
non terminal IExpression expr_without_coma;
non terminal BagExpression bag_expr;
non terminal IUnaryExpression sequence_expr;
non terminal NameTerminal identifier_literal;
non terminal ITerminalExpression<?> literal_expression;
non terminal OrderByExpression order_by_expr;
non terminal IExpression order_by_param_list;
non terminal SortType sort_order;
non terminal List exprs;
non terminal DotExpression dot_expr;
non terminal DotExpression dot_ident_expr;
non terminal IExpression range_expr;

precedence left DEREF;
precedence left NEW;
precedence left WHERE, JOIN;
precedence left FORALL, FORANY;
precedence left NOT;
precedence left UNION, IN;
precedence left ORDER_BY, CLOSE_BY;
precedence left QUESTION_MARK, COLON;
precedence left COMA;
precedence left IDENTIFIER;
precedence left OR, AND;
precedence left EQUALS, NOT_EQUALS, MORE, LESS, MORE_OR_EQUAL, LESS_OR_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MODULO;
precedence left AS, GROUP_AS;
precedence left SUM, COUNT, AVG, MIN, MAX, UNIQUE, EXISTS, MINUS_FUNCTION, INTERSECT, INSTANCEOF;
precedence left LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET;
precedence left LEFT_BOX_BRACKET, RIGHT_BOX_BRACKET;
precedence left DOT;
precedence left BAG, SEQUENCE, STRUCT;
precedence left RANGE;
precedence left GROUPBY_ASC, GROUPBY_DESC;
precedence left SEMICOLON;
precedence left USING;

start with goal;

goal ::= expr:e		{: RESULT = e; parser.setResult(e); :} ;

expr  ::=
		expr:e1 PLUS:o expr:e2	{: RESULT = new PlusExpression( e1, e2); :}
	| 	expr:e1 MINUS:o expr:e2	{: RESULT = new MinusExpression( e1, e2); :}
	| 	expr:e1 MULTIPLY:o 	 expr:e2	{: RESULT = new MultiplyExpression(e1, e2); :}
	| 	expr:e1 DIVIDE:o	 expr:e2	{: RESULT = new DivideExpression( e1, e2); :}
	|	expr:e1 MODULO:o	 expr:e2	{: RESULT = new ModuloExpression( e1, e2); :}
	| 	expr:e1 EQUALS:o	 expr:e2	{: RESULT = new EqualsExpression( e1, e2); :}
	| 	expr:e1 NOT_EQUALS:o expr:e2    {: RESULT = new NotEqualsExpression( e1, e2); :}
	|	expr:e1 OR:o	 	 expr:e2	{: RESULT = new OrExpression( e1, e2 ); :}
	|	expr:e1 AND:o		 expr:e2	{: RESULT = new AndExpression( e1, e2); :}
	|	expr:e1 UNION:o		 expr:e2	{: RESULT = new UnionExpression( e1, e2); :}
	|	expr:e1 DOT:o        expr:e2	{: RESULT = new DotExpression(e1, e2); :}
	|	expr:e1 JOIN:o		 expr:e2	{: RESULT = new JoinExpression( e1, e2); :}
	|	FORALL:o	expr:e1		 expr:e2	{: RESULT = new ForAllExpression( e1, e2); :}
	|	FORANY:o	expr:e1		 expr:e2	{: RESULT = new ForAnyExpression( e1, e2); :}
	| 			SUM:o	 	 expr:e1	{: RESULT = new SumExpression(e1); :}
	| 			COUNT:o	 	 expr:e1	{: RESULT = new CountExpression(e1); :}
	| 			AVG:o	 	 expr:e1	{: RESULT = new AvgExpression(e1); :}
	|		 	MIN:o 		 expr:e1 	{: RESULT = new MinExpression(e1); :}
	| 			MAX:o		 expr:e1 	{: RESULT = new MaxExpression(e1); :}
	|   identifier_literal:i1 DOT:o identifier_literal:i2 {: RESULT = new DotExpression(i1, i2); :}
    |   identifier_literal:i1 DOT:o dot_ident_expr:i2 {: RESULT = new DotExpression(i1, i2); :}
	|	sequence_expr:e					{: RESULT = e; :}
	| 			STRUCT:o	 expr:e1	{: RESULT = new StructExpression( e1); :}
	| 	expr:e1	MINUS_FUNCTION:o	 	 expr:e2	{: RESULT = new MinusExpression(e1, e2); :}
	| 			NOT:o	 	 expr:e1	{: RESULT = new NotExpression(e1); :}
	| 			EXISTS:o	 expr:e1	{: RESULT = new ExistExpression( e1); :}
	| 	expr:e1	AS:o identifier_literal:l {: RESULT = new AsExpression(l, e1 ); :}
	| 	expr:e1	GROUP_AS:o identifier_literal:l {: RESULT = new GroupAsExpression(l, e1 ); :}
	| 	expr:e1 WHERE:o	 	 expr:e2	{: RESULT = new WhereExpression( e1, e2); :}
	| 	expr:e1 LESS:o	 	 expr:e2	{: RESULT = new LessThanExpression( e1, e2); :}
	| 	expr:e1 LESS_OR_EQUAL:o	 	 expr:e2	{: RESULT = new LessOrEqualThanExpression( e1, e2); :}
	|	expr:e1 COMA:o	  	 expr:e2	{: RESULT = new CommaExpression( e1, e2); :}
	| 	expr:e1 IN:o expr:e2	{: RESULT = new InExpression(e1, e2); :}
	| 	expr:e1 INTERSECT:o expr:e2	{: RESULT = new IntersectExpression( e1,e2); :}
	|	        IDENTIFIER:l	    {: RESULT = new NameTerminal(l); :}
	|	        INTEGER_LITERAL:l   {: RESULT = new IntegerTerminal( l); :}
    |	        DOUBLE_LITERAL:l    {: RESULT = new DoubleTerminal( l); :}
    |	        BOOLEAN_LITERAL:l   {: RESULT = new BooleanTerminal( l); :}
    |	        STRING_LITERAL:l    {: RESULT = new StringTerminal( l); :}
	|	LEFT_ROUND_BRACKET:o expr:e1 RIGHT_ROUND_BRACKET {: RESULT = e1; :}
	|   expr:e1 CLOSE_BY:o expr:e2 {: RESULT = new CloseByExpression( e1, e2); :}
	|	FOREACH:o expr:e1 LEFT_CURLY_BRACKET expr:es RIGHT_CURLY_BRACKET {: RESULT = new ForEachExpression(e1, es); :}
	|   expr:e1 ORDER_BY:o order_by_param_list:e2 {: RESULT = new OrderByExpression( e1, e2); :}
	;

dot_ident_expr ::= identifier_literal:i1 DOT:o identifier_literal:i2 {: RESULT = new DotExpression(i1, i2); :}
				|  identifier_literal:i1 DOT:o dot_ident_expr:i2 {: RESULT = new DotExpression(i1, i2); :}
                ;
exprs ::=  {: RESULT = new ArrayList<IExpression>(); :}
	| 	exprs:es expr:e1 SEMICOLON {: es.add(e1); RESULT=es; :}
	;
