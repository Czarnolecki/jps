/* The following code was generated by JFlex 1.4.3 on 22.11.13 18:11 */

package pl.edu.pjwstk.parser;
  
import java_cup.runtime.Symbol;

import static pl.edu.pjwstk.parser.ParserSymbols.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.11.13 18:11 from the specification file
 * <tt>C:/Users/Piotr Sukiennik/Documents/GitHub/jps/src/main/java/pl/edu/pjwstk/parser/Lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IDENTIFIER13 = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\27\1\0\1\24\1\26\22\0\1\77\1\36\1\22"+
    "\1\0\1\14\1\34\1\55\1\23\1\37\1\40\1\32\1\30\1\104"+
    "\1\31\1\21\1\33\12\1\1\120\1\117\1\103\1\35\1\45\1\121"+
    "\1\0\1\52\1\101\1\73\1\54\1\71\1\111\1\65\1\106\1\67"+
    "\1\112\1\13\1\114\1\62\1\53\1\46\1\76\1\70\1\47\1\60"+
    "\1\74\1\61\1\64\1\105\1\56\1\115\1\13\1\43\1\0\1\44"+
    "\1\57\1\12\1\0\1\7\1\102\1\75\1\17\1\5\1\6\1\66"+
    "\1\110\1\15\1\113\1\13\1\10\1\63\1\16\1\50\1\100\1\72"+
    "\1\3\1\11\1\2\1\4\1\25\1\107\1\20\1\116\1\13\1\41"+
    "\1\51\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\7\2\1\0\4\2\1\3\2\0\2\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\2\1\0"+
    "\3\2\1\0\1\2\1\0\14\2\1\22\1\23\5\2"+
    "\1\24\1\25\1\26\1\0\7\2\1\27\5\2\1\0"+
    "\1\30\4\2\1\31\1\32\1\0\1\33\1\34\1\35"+
    "\3\36\1\2\1\27\5\2\1\37\1\2\1\40\13\2"+
    "\1\30\7\2\1\41\5\2\1\42\6\2\1\43\1\44"+
    "\1\37\1\45\1\46\1\2\1\47\1\2\1\0\2\2"+
    "\1\50\1\12\2\2\1\40\1\51\10\2\1\52\2\53"+
    "\11\2\1\54\5\2\1\55\7\2\1\0\3\2\1\56"+
    "\26\2\1\57\1\60\1\61\5\2\1\0\2\2\1\62"+
    "\5\2\1\63\5\2\1\64\2\2\1\65\1\2\1\66"+
    "\1\67\1\2\1\70\1\2\1\71\2\2\2\0\1\2"+
    "\2\0\2\2\2\0\1\2\1\72\3\2\2\0\1\2"+
    "\2\0\2\2\2\0\1\73\2\2\1\74\1\75\2\2"+
    "\1\76\1\77\2\2\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\122\0\u05c4\0\122\0\122\0\122\0\122"+
    "\0\122\0\u0616\0\u0668\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\u06ba\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6"+
    "\0\u08f8\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36"+
    "\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6"+
    "\0\122\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\122\0\122"+
    "\0\122\0\u0fb2\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e"+
    "\0\u11f0\0\u1242\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e"+
    "\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8\0\122\0\122\0\u161a"+
    "\0\122\0\122\0\122\0\u166c\0\u16be\0\122\0\u1710\0\u1762"+
    "\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\122\0\u194e\0\122"+
    "\0\u19a0\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde"+
    "\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e"+
    "\0\u1ec0\0\u1f12\0\u1f64\0\122\0\u1fb6\0\u2008\0\u205a\0\u20ac"+
    "\0\u20fe\0\u0fb2\0\u2150\0\u21a2\0\u21f4\0\u2246\0\u2298\0\u22ea"+
    "\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u233c\0\u0148\0\u238e"+
    "\0\u23e0\0\u2432\0\u2484\0\u0148\0\u0148\0\u24d6\0\u2528\0\u0148"+
    "\0\122\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714\0\u2766"+
    "\0\u27b8\0\u0148\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4"+
    "\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u0148\0\u2b90\0\u2be2"+
    "\0\u2c34\0\u2c86\0\u2cd8\0\u0148\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20"+
    "\0\u2e72\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u0148"+
    "\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee"+
    "\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e"+
    "\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\u0148\0\u0148"+
    "\0\u0148\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8"+
    "\0\u39fa\0\u0148\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u0148"+
    "\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u0148\0\u3d80\0\u3dd2"+
    "\0\u0148\0\u3e24\0\u0148\0\u0148\0\u3e76\0\u0148\0\u3ec8\0\122"+
    "\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158"+
    "\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u0148\0\u42f2\0\u4344\0\u4396"+
    "\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626"+
    "\0\u4678\0\u0148\0\u46ca\0\u471c\0\122\0\122\0\u476e\0\u47c0"+
    "\0\122\0\u0148\0\u4812\0\u4864\0\u0148";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\2\5\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\5\1\24\1\23\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\5\1\60\1\61\1\62\1\5"+
    "\1\63\1\5\1\64\1\5\1\65\1\5\1\23\1\5"+
    "\1\66\1\67\1\70\1\71\1\72\1\5\1\73\1\5"+
    "\1\74\1\75\1\76\3\5\1\77\1\100\1\101\123\0"+
    "\1\3\17\0\1\102\101\0\2\5\1\103\6\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\10\5\1\104"+
    "\1\0\1\5\1\0\1\5\1\105\2\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\3\5\1\106\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\6\5\1\107\2\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\2\5\1\110\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\7\5\1\111\1\112\1\0\1\5\1\0\1\5"+
    "\1\113\2\5\4\0\1\114\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\1\5\1\115\1\5\1\116\1\117\4\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\20\0\1\120\105\0\11\5\1\0\1\5\1\0"+
    "\1\5\1\121\2\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\4\5\1\122\4\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\2\5\1\123\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\124\4\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\2\5"+
    "\1\125\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\24\0\1\126\100\0\22\21\1\127"+
    "\77\21\22\130\1\0\77\130\27\0\1\23\127\0\1\131"+
    "\121\0\1\132\121\0\1\133\65\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\1\5\1\134\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\2\5\1\135\6\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\54\0\1\136\51\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\1\5\1\137\1\5"+
    "\1\0\1\5\1\0\1\140\3\5\1\141\12\5\1\0"+
    "\3\5\2\0\7\5\1\142\2\5\4\0\11\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\1\143\2\5"+
    "\1\0\3\5\1\0\1\5\1\0\11\5\1\144\5\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\11\5\1\145\5\5\1\0\3\5"+
    "\2\0\12\5\60\0\1\146\45\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\1\147\2\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\62\0\1\150\43\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\5\1\151\7\5\1\152\2\5\1\153"+
    "\2\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\1\5\1\154\1\5\1\0\1\5\1\0\1\155\16\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\1\156"+
    "\2\5\1\0\1\5\1\0\7\5\1\157\7\5\1\0"+
    "\3\5\2\0\12\5\4\0\6\5\1\160\2\5\1\0"+
    "\1\5\1\0\1\161\3\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\1\5\1\162\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\2\5\1\163\6\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\1\5\1\164\1\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\165\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\1\166\2\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\7\5\1\167\2\5\4\0"+
    "\7\5\1\170\1\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\2\5\1\171\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\1\172\2\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\6\5\1\173\2\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\40\0\1\174\65\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\1\5\1\175"+
    "\10\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\3\5\1\176\6\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\1\177\2\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\1\200\2\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\2\5\1\201\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\1\202"+
    "\121\0\3\5\1\203\5\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\1\204\3\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\1\205\3\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\1\206\3\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\7\5\1\207"+
    "\1\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\2\5\1\210\6\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\7\5\1\211\1\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\15\5\1\212"+
    "\1\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\2\5\1\213\1\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\11\5\1\214\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\6\5\1\215\10\5\1\0\3\5"+
    "\2\0\12\5\4\0\2\5\1\216\6\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\3\5"+
    "\1\217\13\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\12\5\1\220\4\5"+
    "\1\0\3\5\2\0\12\5\21\0\1\221\104\0\1\5"+
    "\1\222\6\5\1\223\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\2\5\1\224\7\5\4\0\1\5\1\225\7\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\2\5\1\226\5\5\1\227\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\2\5\1\230\6\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\26\0\1\231"+
    "\77\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\2\5\1\232\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\2\5\1\233\1\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\2\5\1\213"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\10\5"+
    "\1\214\1\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\13\5\1\212\3\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\5\5"+
    "\1\215\11\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\7\5\1\211\2\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\14\5\1\225\2\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\1\224\11\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\1\5\1\234\1\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\235\16\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\1\5"+
    "\1\230\1\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\2\5\1\217\14\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\10\5\1\236\6\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\1\5\1\237\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\7\5\1\240\7\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\7\5\1\241\7\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\242"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\1\5\1\243\1\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\3\5\1\242\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\1\5\1\244"+
    "\2\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\1\245\2\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\2\5\1\246\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\247\13\5\1\250\2\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\7\5"+
    "\1\251\7\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\1\252\15\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\1\253\2\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\2\5\1\254\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\3\5"+
    "\1\255\5\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\5\5\1\256\11\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\6\5\1\256\10\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\11\5"+
    "\1\257\5\5\1\0\3\5\2\0\12\5\4\0\4\5"+
    "\1\260\4\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\1\5\1\261\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\7\5\1\262\7\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\1\263\3\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\4\5\1\264"+
    "\4\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\1\5\1\265\2\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\2\5\1\266\1\0\3\5\1\0\1\5"+
    "\1\0\12\5\1\267\4\5\1\0\3\5\2\0\12\5"+
    "\4\0\10\5\1\270\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\4\0\10\5\1\203"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\4\5\1\271\4\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\3\5\1\272\5\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\3\5"+
    "\1\273\5\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\22\0\1\274\103\0\4\5"+
    "\1\275\4\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\1\5\1\276\7\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\4\5\1\277\4\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\15\5"+
    "\1\300\1\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\11\5\1\301\5\5"+
    "\1\0\3\5\2\0\12\5\4\0\4\5\1\302\4\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\11\5\1\303\5\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\13\5"+
    "\1\300\3\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\1\304\15\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\1\305\15\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\1\306\2\5\1\0\3\5\1\0"+
    "\1\5\1\0\10\5\1\307\6\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\1\5\1\310\1\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\1\5\1\311"+
    "\15\5\1\0\3\5\2\0\12\5\4\0\3\5\1\312"+
    "\5\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\5\1\313\15\5\1\0\3\5\2\0"+
    "\12\5\4\0\3\5\1\314\5\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\14\5\1\315"+
    "\2\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\11\5\1\316\5\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\317\16\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\1\5\1\320\1\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\321\16\5\1\0"+
    "\3\5\2\0\12\5\4\0\10\5\1\322\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\1\5\1\323\2\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\1\5"+
    "\1\324\1\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\2\5\1\325\6\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\11\5\1\326\5\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\1\5\1\327\1\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\1\5\1\327\2\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\6\5\1\330\10\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\1\5"+
    "\1\331\2\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\3\5\1\332\5\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\1\5"+
    "\1\333\7\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\6\5\1\334\2\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\15\5\1\335\1\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\336\4\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\10\0\1\337"+
    "\115\0\2\5\1\340\6\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\6\5"+
    "\1\341\2\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\5\5\1\342\3\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\1\5\1\343\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\2\5\1\344\6\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\4\5\1\342\5\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\11\5\1\345\5\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\13\5\1\346\3\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\1\5\1\331\1\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\1\347\15\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\5\5\1\330\11\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\1\350\16\5\1\0\3\5\2\0\12\5\4\0"+
    "\10\5\1\350\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\16\5\1\351\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\1\352\2\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\1\353\2\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\1\5\1\354\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\14\5\1\355\2\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\14\5\1\356"+
    "\2\5\1\0\3\5\2\0\12\5\4\0\11\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\11\5\1\357\5\5\1\0"+
    "\3\5\2\0\12\5\4\0\4\5\1\360\4\5\1\0"+
    "\1\5\1\0\4\5\4\0\1\5\20\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\1\5\1\356\7\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\11\5\1\361"+
    "\5\5\1\0\3\5\2\0\12\5\4\0\4\5\1\361"+
    "\4\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\1\362\2\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\363\4\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\10\5"+
    "\1\364\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\11\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\15\5\1\365\1\5\1\0\3\5\2\0"+
    "\12\5\4\0\1\5\1\366\7\5\1\0\1\5\1\0"+
    "\4\5\4\0\1\5\20\0\3\5\1\0\3\5\1\0"+
    "\1\5\1\0\17\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\1\5\1\367\2\5\4\0"+
    "\1\5\20\0\3\5\1\0\3\5\1\0\1\5\1\0"+
    "\17\5\1\0\3\5\2\0\12\5\23\0\1\370\102\0"+
    "\10\5\1\371\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\1\5\1\372\2\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\373\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\374\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\1\5\1\375\1\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\14\5"+
    "\1\366\2\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\11\5\1\363\5\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\376\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\377\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\1\5"+
    "\1\u0100\1\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\1\u0101\16\5\1\0\3\5\2\0\12\5\4\0"+
    "\11\5\1\0\1\5\1\0\4\5\4\0\1\5\20\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\0\1\364\16\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\u0102\3\5\2\0\12\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\u0103\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\13\5\1\u0104\3\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\3\5\1\u0105\6\5"+
    "\4\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\15\5"+
    "\1\u0106\1\5\1\0\3\5\2\0\12\5\4\0\4\5"+
    "\1\u0107\4\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\15\5\1\u0108\1\5\1\0\3\5"+
    "\2\0\12\5\104\0\1\u0109\122\0\1\u010a\20\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\13\5\1\u010b\3\5"+
    "\1\0\3\5\2\0\12\5\55\0\1\u010c\56\0\1\u010d"+
    "\113\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\13\5"+
    "\1\u010e\3\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\11\5\1\u010f\5\5"+
    "\1\0\3\5\2\0\12\5\104\0\1\u0110\122\0\1\u0111"+
    "\20\0\11\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\1\5\1\u0105\10\5\4\0\4\5"+
    "\1\u0112\4\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\15\5\1\u0113\1\5\1\0\3\5"+
    "\2\0\12\5\4\0\4\5\1\u0114\4\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\17\5\1\0\3\5\2\0\12\5"+
    "\120\0\1\u0115\122\0\1\u0115\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\11\5\1\u0112\5\5\1\0\3\5"+
    "\2\0\12\5\63\0\1\u0116\52\0\1\u0116\111\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\11\5\1\u0117\5\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\3\5\1\0\3\5"+
    "\1\0\1\5\1\0\13\5\1\u0118\3\5\1\0\3\5"+
    "\2\0\12\5\120\0\1\u0119\122\0\1\u0119\4\0\1\5"+
    "\1\u011a\7\5\1\0\1\5\1\0\4\5\4\0\1\5"+
    "\20\0\3\5\1\0\3\5\1\0\1\5\1\0\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\11\5\1\0\1\5"+
    "\1\0\4\5\4\0\1\5\20\0\2\5\1\u011b\1\0"+
    "\3\5\1\0\1\5\1\0\17\5\1\0\3\5\2\0"+
    "\12\5\4\0\11\5\1\0\1\5\1\0\4\5\4\0"+
    "\1\5\20\0\1\u011c\2\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\12\5\4\0\11\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\14\5\1\u011a\2\5"+
    "\1\0\3\5\2\0\12\5\4\0\5\5\1\u011d\3\5"+
    "\1\0\1\5\1\0\4\5\4\0\1\5\20\0\3\5"+
    "\1\0\3\5\1\0\1\5\1\0\17\5\1\0\3\5"+
    "\2\0\12\5\4\0\11\5\1\0\1\5\1\0\4\5"+
    "\4\0\1\5\20\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\0\17\5\1\0\3\5\2\0\4\5\1\u011d\5\5"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\10\1\1\0\5\1\2\0\1\11\1\1"+
    "\5\11\1\0\1\1\6\11\3\1\1\0\3\1\1\0"+
    "\1\1\1\0\15\1\1\11\5\1\3\11\1\0\15\1"+
    "\1\0\5\1\2\11\1\0\3\11\2\1\1\11\7\1"+
    "\1\11\1\1\1\11\23\1\1\11\24\1\1\0\7\1"+
    "\1\11\42\1\1\0\42\1\1\0\30\1\1\11\2\1"+
    "\2\0\1\1\2\0\2\1\2\0\5\1\2\0\1\1"+
    "\2\0\2\1\2\0\3\1\2\11\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private StringBuffer str;

        private Symbol createToken(int id) {
                return createToken(id, yytext());
        }
        
        private Symbol createToken(int id, Object o) {
                return new Symbol(id,o);
        }
        
        public int getPos() {
                return zzMarkedPos;     
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return createToken(STRING_LITERAL, yytext().substring(1,yytext().length()-1)) ;
          }
        case 65: break;
        case 60: 
          { return createToken(ORDER_BY);
          }
        case 66: break;
        case 59: 
          { return createToken(SEQUENCE);
          }
        case 67: break;
        case 3: 
          { return createToken(DOT);
          }
        case 68: break;
        case 49: 
          { return createToken(UNION );
          }
        case 69: break;
        case 11: 
          { return createToken(LEFT_ROUND_BRACKET);
          }
        case 70: break;
        case 7: 
          { return createToken(MULTIPLY);
          }
        case 71: break;
        case 54: 
          { return createToken(UNIQUE);
          }
        case 72: break;
        case 47: 
          { return createToken(JOIN);
          }
        case 73: break;
        case 36: 
          { return createToken(GROUPBY_ASC);
          }
        case 74: break;
        case 27: 
          { return createToken(EQUALS);
          }
        case 75: break;
        case 62: 
          { return createToken(CLOSE_BY);
          }
        case 76: break;
        case 28: 
          { return createToken(NOT_EQUALS);
          }
        case 77: break;
        case 64: 
          { return createToken(INSTANCEOF);
          }
        case 78: break;
        case 63: 
          { return createToken(INTERSECT);
          }
        case 79: break;
        case 12: 
          { return createToken(RIGHT_ROUND_BRACKET);
          }
        case 80: break;
        case 39: 
          { return createToken(SUM);
          }
        case 81: break;
        case 38: 
          { return createToken(AVG);
          }
        case 82: break;
        case 21: 
          { return createToken(COLON);
          }
        case 83: break;
        case 13: 
          { return createToken(LEFT_CURLY_BRACKET);
          }
        case 84: break;
        case 50: 
          { return createToken(DEREF);
          }
        case 85: break;
        case 57: 
          { Symbol t = createToken(IDENTIFIER,yytext());
                return t;
          }
        case 86: break;
        case 25: 
          { return createToken(RANGE);
          }
        case 87: break;
        case 55: 
          { return createToken(EXISTS);
          }
        case 88: break;
        case 10: 
          { return createToken(NOT);
          }
        case 89: break;
        case 31: 
          { return createToken(AND);
          }
        case 90: break;
        case 44: 
          { return createToken(BAG);
          }
        case 91: break;
        case 42: 
          { return createToken(MAX);
          }
        case 92: break;
        case 5: 
          { return createToken(PLUS);
          }
        case 93: break;
        case 56: 
          { return createToken(STRUCT);
          }
        case 94: break;
        case 14: 
          { return createToken(RIGHT_CURLY_BRACKET);
          }
        case 95: break;
        case 15: 
          { return createToken(LEFT_BOX_BRACKET);
          }
        case 96: break;
        case 17: 
          { return createToken(MORE);
          }
        case 97: break;
        case 18: 
          { return createToken(LESS);
          }
        case 98: break;
        case 2: 
          { Symbol t = createToken(IDENTIFIER,yytext());
                                return t;
          }
        case 99: break;
        case 35: 
          { return createToken(FORALL);
          }
        case 100: break;
        case 29: 
          { return createToken(MORE_OR_EQUAL);
          }
        case 101: break;
        case 61: 
          { return createToken(GROUP_AS);
          }
        case 102: break;
        case 6: 
          { return createToken(MINUS);
          }
        case 103: break;
        case 58: 
          { return createToken(FOREACH);
          }
        case 104: break;
        case 48: 
          { return createToken(USING);
          }
        case 105: break;
        case 20: 
          { return createToken(SEMICOLON);
          }
        case 106: break;
        case 22: 
          { return createToken(QUESTION_MARK);
          }
        case 107: break;
        case 19: 
          { return createToken(COMA);
          }
        case 108: break;
        case 30: 
          { return createToken(OR);
          }
        case 109: break;
        case 24: 
          { return createToken(IN);
          }
        case 110: break;
        case 52: 
          { return createToken(COUNT);
          }
        case 111: break;
        case 8: 
          { return createToken(DIVIDE);
          }
        case 112: break;
        case 46: 
          { return createToken(GROUPBY_DESC);
          }
        case 113: break;
        case 1: 
          { int val;
                try {
                        val = Integer.parseInt(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(INTEGER_LITERAL, new Integer(val));
          }
        case 114: break;
        case 51: 
          { return createToken(MINUS_FUNCTION);
          }
        case 115: break;
        case 37: 
          { return createToken(FORANY);
          }
        case 116: break;
        case 32: 
          { return createToken(XOR);
          }
        case 117: break;
        case 43: 
          { return createToken(MIN);
          }
        case 118: break;
        case 33: 
          { return createToken(LESS_OR_EQUAL);
          }
        case 119: break;
        case 23: 
          { return createToken(AS);
          }
        case 120: break;
        case 41: 
          { return createToken(CHAR_LITERAL, yytext().charAt(1)) ;
          }
        case 121: break;
        case 40: 
          { return createToken(NEW);
          }
        case 122: break;
        case 34: 
          { double val;
                try {
                        val = Double.parseDouble(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(DOUBLE_LITERAL, new Double(val));
          }
        case 123: break;
        case 53: 
          { return createToken(WHERE);
          }
        case 124: break;
        case 45: 
          { boolean val;
                try {
                        val = Boolean.parseBoolean(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(BOOLEAN_LITERAL, new Boolean(val));
          }
        case 125: break;
        case 16: 
          { return createToken(RIGHT_BOX_BRACKET);
          }
        case 126: break;
        case 9: 
          { return createToken(MODULO);
          }
        case 127: break;
        case 4: 
          { 
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {         return createToken(EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
