
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 18 23:56:07 CET 2013
//----------------------------------------------------

package pl.edu.pjwstk.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import edu.pjwstk.jps.ast.IExpression;
import edu.pjwstk.jps.ast.terminal.*;
import edu.pjwstk.jps.ast.unary.*;
import pl.edu.pjwstk.parser.ParserException;
import pl.edu.pjwstk.ast.auxname.*;
import pl.edu.pjwstk.ast.binary.*;
import pl.edu.pjwstk.ast.terminal.*;
import pl.edu.pjwstk.ast.unary.*;

/** CUP v0.10k generated parser.
  * @version Mon Nov 18 23:56:07 CET 2013
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\004\003\000\002\016" +
    "\005\000\002\017\005\000\002\017\005\000\002\015\002" +
    "\000\002\015\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\044\004\025\005\034\006\012\007\014\012" +
    "\017\026\011\027\023\030\032\036\026\037\030\047\010" +
    "\052\006\053\020\057\013\060\024\063\027\072\021\001" +
    "\002\000\132\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022" +
    "\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\072\uffeb" +
    "\001\002\000\132\002\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\072" +
    "\uffde\001\002\000\044\004\025\005\034\006\012\007\014" +
    "\012\017\026\011\027\023\030\032\036\026\037\030\047" +
    "\010\052\006\053\020\057\013\060\024\063\027\072\021" +
    "\001\002\000\062\002\000\014\041\015\055\016\040\017" +
    "\052\020\046\022\050\023\057\025\053\031\042\032\037" +
    "\033\063\035\060\040\047\041\043\042\056\043\036\050" +
    "\044\051\061\054\062\055\045\056\064\061\054\062\051" +
    "\001\002\000\044\004\025\005\034\006\012\007\014\012" +
    "\017\026\011\027\023\030\032\036\026\037\030\047\010" +
    "\052\006\053\020\057\013\060\024\063\027\072\021\001" +
    "\002\000\044\004\025\005\034\006\012\007\014\012\017" +
    "\026\011\027\023\030\032\036\026\037\030\047\010\052" +
    "\006\053\020\057\013\060\024\063\027\072\021\001\002" +
    "\000\132\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\012" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0" +
    "\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\072\uffd0\001" +
    "\002\000\044\004\025\005\034\006\012\007\014\012\017" +
    "\026\011\027\023\030\032\036\026\037\030\047\010\052" +
    "\006\053\020\057\013\060\024\063\027\072\021\001\002" +
    "\000\132\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\072\uffd3\001" +
    "\002\000\132\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022" +
    "\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\072\ufff5" +
    "\001\002\000\004\002\130\001\002\000\132\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\072\uffcf\001\002\000\044\004\025" +
    "\005\034\006\012\007\014\012\017\026\011\027\023\030" +
    "\032\036\026\037\030\047\010\052\006\053\020\057\013" +
    "\060\024\063\027\072\021\001\002\000\044\004\025\005" +
    "\034\006\012\007\014\012\017\026\011\027\023\030\032" +
    "\036\026\037\030\047\010\052\006\053\020\057\013\060" +
    "\024\063\027\072\021\001\002\000\132\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\012\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\072\uffdd\001\002\000\044\004\025\005" +
    "\034\006\012\007\014\012\017\026\011\027\023\030\032" +
    "\036\026\037\030\047\010\052\006\053\020\057\013\060" +
    "\024\063\027\072\021\001\002\000\044\004\025\005\034" +
    "\006\012\007\014\012\017\026\011\027\023\030\032\036" +
    "\026\037\030\047\010\052\006\053\020\057\013\060\024" +
    "\063\027\072\021\001\002\000\132\002\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\072\uffd2\001\002\000\044\004\025\005\034" +
    "\006\012\007\014\012\017\026\011\027\023\030\032\036" +
    "\026\037\030\047\010\052\006\053\020\057\013\060\024" +
    "\063\027\072\021\001\002\000\044\004\025\005\034\006" +
    "\012\007\014\012\017\026\011\027\023\030\032\036\026" +
    "\037\030\047\010\052\006\053\020\057\013\060\024\063" +
    "\027\072\021\001\002\000\044\004\025\005\034\006\012" +
    "\007\014\012\017\026\011\027\023\030\032\036\026\037" +
    "\030\047\010\052\006\053\020\057\013\060\024\063\027" +
    "\072\021\001\002\000\132\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\072\uffd9\001\002\000\044\004\025\005\034\006\012" +
    "\007\014\012\017\026\011\027\023\030\032\036\026\037" +
    "\030\047\010\052\006\053\020\057\013\060\024\063\027" +
    "\072\021\001\002\000\132\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\022\uffec\023\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\072\uffec\001\002\000\132\002\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\072\uffd1\001\002\000\132\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\056\043\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\072\ufff0\001\002\000\044\004\025\005\034" +
    "\006\012\007\014\012\017\026\011\027\023\030\032\036" +
    "\026\037\030\047\010\052\006\053\020\057\013\060\024" +
    "\063\027\072\021\001\002\000\044\004\025\005\034\006" +
    "\012\007\014\012\017\026\011\027\023\030\032\036\026" +
    "\037\030\047\010\052\006\053\020\057\013\060\024\063" +
    "\027\072\021\001\002\000\044\004\025\005\034\006\012" +
    "\007\014\012\017\026\011\027\023\030\032\036\026\037" +
    "\030\047\010\052\006\053\020\057\013\060\024\063\027" +
    "\072\021\001\002\000\044\004\025\005\034\006\012\007" +
    "\014\012\017\026\011\027\023\030\032\036\026\037\030" +
    "\047\010\052\006\053\020\057\013\060\024\063\027\072" +
    "\021\001\002\000\044\004\025\005\034\006\012\007\014" +
    "\012\017\026\011\027\023\030\032\036\026\037\030\047" +
    "\010\052\006\053\020\057\013\060\024\063\027\072\021" +
    "\001\002\000\044\004\025\005\034\006\012\007\014\012" +
    "\017\026\011\027\023\030\032\036\026\037\030\047\010" +
    "\052\006\053\020\057\013\060\024\063\027\072\021\001" +
    "\002\000\002\001\002\000\004\007\014\001\002\000\044" +
    "\004\025\005\034\006\012\007\014\012\017\026\011\027" +
    "\023\030\032\036\026\037\030\047\010\052\006\053\020" +
    "\057\013\060\024\063\027\072\021\001\002\000\044\004" +
    "\025\005\034\006\012\007\014\012\017\026\011\027\023" +
    "\030\032\036\026\037\030\047\010\052\006\053\020\057" +
    "\013\060\024\063\027\072\021\001\002\000\044\004\025" +
    "\005\034\006\012\007\014\012\017\026\011\027\023\030" +
    "\032\036\026\037\030\047\010\052\006\053\020\057\013" +
    "\060\024\063\027\072\021\001\002\000\044\004\025\005" +
    "\034\006\012\007\014\012\017\026\011\027\023\030\032" +
    "\036\026\037\030\047\010\052\006\053\020\057\013\060" +
    "\024\063\027\072\021\001\002\000\044\004\025\005\034" +
    "\006\012\007\014\012\017\026\011\027\023\030\032\036" +
    "\026\037\030\047\010\052\006\053\020\057\013\060\024" +
    "\063\027\072\021\001\002\000\044\004\025\005\034\006" +
    "\012\007\014\012\017\026\011\027\023\030\032\036\026" +
    "\037\030\047\010\052\006\053\020\057\013\060\024\063" +
    "\027\072\021\001\002\000\044\004\025\005\034\006\012" +
    "\007\014\012\017\026\011\027\023\030\032\036\026\037" +
    "\030\047\010\052\006\053\020\057\013\060\024\063\027" +
    "\072\021\001\002\000\044\004\025\005\034\006\012\007" +
    "\014\012\017\026\011\027\023\030\032\036\026\037\030" +
    "\047\010\052\006\053\020\057\013\060\024\063\027\072" +
    "\021\001\002\000\044\004\025\005\034\006\012\007\014" +
    "\012\017\026\011\027\023\030\032\036\026\037\030\047" +
    "\010\052\006\053\020\057\013\060\024\063\027\072\021" +
    "\001\002\000\044\004\025\005\034\006\012\007\014\012" +
    "\017\026\011\027\023\030\032\036\026\037\030\047\010" +
    "\052\006\053\020\057\013\060\024\063\027\072\021\001" +
    "\002\000\044\004\025\005\034\006\012\007\014\012\017" +
    "\026\011\027\023\030\032\036\026\037\030\047\010\052" +
    "\006\053\020\057\013\060\024\063\027\072\021\001\002" +
    "\000\044\004\025\005\034\006\012\007\014\012\017\026" +
    "\011\027\023\030\032\036\026\037\030\047\010\052\006" +
    "\053\020\057\013\060\024\063\027\072\021\001\002\000" +
    "\044\004\025\005\034\006\012\007\014\012\017\026\011" +
    "\027\023\030\032\036\026\037\030\047\010\052\006\053" +
    "\020\057\013\060\024\063\027\072\021\001\002\000\044" +
    "\004\025\005\034\006\012\007\014\012\017\026\011\027" +
    "\023\030\032\036\026\037\030\047\010\052\006\053\020" +
    "\057\013\060\024\063\027\072\021\001\002\000\004\007" +
    "\014\001\002\000\132\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\072\uffe5\001\002\000\132\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\012\uffe3\014\041\015\055\016\040\017\052" +
    "\020\046\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\056\043\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\045\056\064\057\uffe3" +
    "\060\uffe3\061\054\062\051\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\072\uffe3\001\002\000\132\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\012\ufff4\014\041\015\055\016\040\017" +
    "\052\020\046\022\050\023\057\025\053\026\ufff4\027\ufff4" +
    "\030\ufff4\031\042\032\037\033\063\035\060\036\ufff4\037" +
    "\ufff4\040\047\041\043\042\056\043\ufff4\047\ufff4\050\044" +
    "\051\061\052\ufff4\053\ufff4\054\ufff4\055\045\056\064\057" +
    "\ufff4\060\ufff4\061\054\062\051\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\072\ufff4\001\002\000\132\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\012\uffdb\014\041\015\055\016\040" +
    "\017\052\020\046\022\050\023\057\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\042\032\037\033\063\035\060\036\uffdb" +
    "\037\uffdb\040\047\041\uffdb\042\056\043\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\045\056\064" +
    "\057\uffdb\060\uffdb\061\054\062\051\063\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\072\uffdb\001\002\000\132\002\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\012\uffe2\014\041\015\055\016" +
    "\040\017\052\020\046\022\uffe2\023\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\056\043\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\045\056" +
    "\064\057\uffe2\060\uffe2\061\054\062\051\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\072\uffe2\001\002\000\132\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\014\041\015\055" +
    "\016\040\017\052\020\046\022\ufff9\023\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\056\043\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\045" +
    "\056\064\057\ufff9\060\ufff9\061\054\062\051\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\072\ufff9\001\002\000\132\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\072\uffd8\001\002\000\132\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe\014\ufffe" +
    "\015\ufffe\016\040\017\052\020\046\022\ufffe\023\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\056\043" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\045\056\064\057\ufffe\060\ufffe\061\054\062\051\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\072\ufffe\001\002\000\132" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\056" +
    "\043\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\072\uffe9\001\002\000" +
    "\132\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6" +
    "\014\041\015\055\016\040\017\052\020\046\022\050\023" +
    "\057\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\042\032\037" +
    "\033\063\035\060\036\ufff6\037\ufff6\040\047\041\ufff6\042" +
    "\056\043\ufff6\047\ufff6\050\044\051\061\052\ufff6\053\ufff6" +
    "\054\ufff6\055\045\056\064\057\ufff6\060\ufff6\061\054\062" +
    "\051\063\ufff6\064\ufff6\065\ufff6\066\ufff6\072\ufff6\001\002" +
    "\000\132\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\022\ufffc" +
    "\023\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\056\043\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\045\056\064\057\ufffc\060\ufffc\061\054" +
    "\062\051\063\ufffc\064\ufffc\065\ufffc\066\ufffc\072\ufffc\001" +
    "\002\000\132\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\056\043\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\072\uffdf" +
    "\001\002\000\132\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\012\ufffa\014\041\015\055\016\040\017\052\020\046" +
    "\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\056\043\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\045\056\064\057\ufffa\060\ufffa" +
    "\061\054\062\051\063\ufffa\064\ufffa\065\ufffa\066\ufffa\072" +
    "\ufffa\001\002\000\132\002\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\012\uffe1\014\041\015\055\016\040\017\052\020" +
    "\046\022\050\023\057\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\042\032\037\033\063\035\060\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\056\043\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\045\056\064\057\uffe1\060" +
    "\uffe1\061\054\062\051\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\072\uffe1\001\002\000\132\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\056\043\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\045\056\064\057\ufffb" +
    "\060\ufffb\061\054\062\051\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\072\ufffb\001\002\000\132\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\072\uffe6\001\002\000\132\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\012\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\022\uffce\023\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\072\uffce\001\002\000\132\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\012\uffe0\014\041\015\055\016" +
    "\040\017\052\020\046\022\050\023\057\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\042\032\037\033\063\035\060\036" +
    "\uffe0\037\uffe0\040\047\041\uffe0\042\056\043\uffe0\047\uffe0" +
    "\050\044\051\061\052\uffe0\053\uffe0\054\uffe0\055\045\056" +
    "\064\057\uffe0\060\uffe0\061\054\062\051\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\072\uffe0\001\002\000\132\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8\014\041\015\055" +
    "\016\040\017\052\020\046\022\050\023\057\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\063\035\060" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\056\043\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\045" +
    "\056\064\057\ufff8\060\ufff8\061\054\062\051\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\072\ufff8\001\002\000\132\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\012\uffff\014\uffff\015" +
    "\uffff\016\040\017\052\020\046\022\uffff\023\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\056\043\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\045\056\064\057\uffff\060\uffff\061\054\062\051\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\072\uffff\001\002\000\132\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\056\043" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\045\056\064\057\ufffd\060\ufffd\061\054\062\051\063" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\072\ufffd\001\002\000\132" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\014" +
    "\041\015\055\016\040\017\052\020\046\022\050\023\057" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\063\035\060\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\056" +
    "\043\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\045\056\064\057\ufff7\060\ufff7\061\054\062\051" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\072\ufff7\001\002\000" +
    "\132\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4" +
    "\014\041\015\055\016\040\017\052\020\046\022\050\023" +
    "\057\025\053\026\uffe4\027\uffe4\030\uffe4\031\042\032\037" +
    "\033\063\035\060\036\uffe4\037\uffe4\040\047\041\043\042" +
    "\056\043\uffe4\047\uffe4\050\044\051\061\052\uffe4\053\uffe4" +
    "\054\uffe4\055\045\056\064\057\uffe4\060\uffe4\061\054\062" +
    "\051\063\uffe4\064\uffe4\065\uffe4\066\uffe4\072\uffe4\001\002" +
    "\000\132\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed" +
    "\023\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\056\043\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\072\uffed\001" +
    "\002\000\062\014\041\015\055\016\040\017\052\020\046" +
    "\022\050\023\057\025\053\031\042\032\037\033\063\035" +
    "\060\040\047\041\043\042\056\043\036\050\044\051\061" +
    "\054\062\055\045\056\064\061\054\062\051\064\116\001" +
    "\002\000\132\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\072\uffdc" +
    "\001\002\000\132\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\056\043\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\072" +
    "\uffee\001\002\000\132\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\056\043\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\072\uffe7\001\002\000\132\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\056\043\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\072\uffef\001\002\000\062\014\041\015\055\016\040" +
    "\017\052\020\046\022\050\023\057\025\053\031\042\032" +
    "\037\033\063\035\060\040\047\041\043\042\056\043\036" +
    "\050\044\051\061\054\062\055\045\056\064\061\054\062" +
    "\051\065\123\001\002\000\044\004\025\005\034\006\012" +
    "\007\014\012\017\026\011\027\023\030\032\036\026\037" +
    "\030\047\010\052\006\053\020\057\013\060\024\063\027" +
    "\072\021\001\002\000\062\014\041\015\055\016\040\017" +
    "\052\020\046\022\050\023\057\025\053\031\042\032\037" +
    "\033\063\035\060\040\047\041\043\042\056\043\036\050" +
    "\044\051\061\054\062\055\045\056\064\061\054\062\051" +
    "\066\125\001\002\000\132\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\072\uffda\001\002\000\122\004\025\005\034\006\012" +
    "\007\014\012\017\014\041\015\055\016\040\017\052\020" +
    "\046\022\050\023\057\025\053\026\011\027\023\030\032" +
    "\031\042\032\037\033\063\035\060\036\026\037\030\040" +
    "\047\041\043\042\056\043\036\047\010\050\044\051\061" +
    "\052\006\053\020\054\062\055\045\056\064\057\013\060" +
    "\024\061\054\062\051\063\027\072\021\001\002\000\132" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\012\ufff2\014" +
    "\041\015\055\016\040\017\052\020\046\022\050\023\057" +
    "\025\053\026\ufff2\027\ufff2\030\ufff2\031\042\032\037\033" +
    "\063\035\060\036\ufff2\037\ufff2\040\047\041\043\042\056" +
    "\043\ufff2\047\ufff2\050\044\051\061\052\ufff2\053\ufff2\054" +
    "\ufff2\055\045\056\064\057\ufff2\060\ufff2\061\054\062\051" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\072\ufff2\001\002\000" +
    "\004\002\001\001\002\000\132\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\012\uffe8\014\041\015\055\016\040\017" +
    "\052\020\046\022\050\023\057\025\053\026\uffe8\027\uffe8" +
    "\030\uffe8\031\042\032\037\033\063\035\060\036\uffe8\037" +
    "\uffe8\040\047\041\043\042\056\043\uffe8\047\uffe8\050\044" +
    "\051\061\052\uffe8\053\uffe8\054\uffe8\055\045\056\064\057" +
    "\uffe8\060\uffe8\061\054\062\051\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\072\uffe8\001\002\000\132\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\056\043\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\072\ufff1\001\002\000\132\002\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\012\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\072\uffea\001\002\000\122\004\025\005" +
    "\034\006\012\007\014\012\017\014\041\015\055\016\040" +
    "\017\052\020\046\022\050\023\057\025\053\026\011\027" +
    "\023\030\032\031\042\032\037\033\063\035\060\036\026" +
    "\037\030\040\047\041\043\042\056\043\036\047\010\050" +
    "\044\051\061\052\006\053\020\054\062\055\045\056\064" +
    "\057\013\060\024\061\054\062\051\063\027\072\021\001" +
    "\002\000\132\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\012\ufff3\014\041\015\055\016\040\017\052\020\046\022" +
    "\050\023\057\025\053\026\ufff3\027\ufff3\030\ufff3\031\042" +
    "\032\037\033\063\035\060\036\ufff3\037\ufff3\040\047\041" +
    "\043\042\056\043\ufff3\047\ufff3\050\044\051\061\052\ufff3" +
    "\053\ufff3\054\ufff3\055\045\056\064\057\ufff3\060\ufff3\061" +
    "\054\062\051\063\ufff3\064\ufff3\065\ufff3\066\ufff3\072\ufff3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\022\003\015\004\006\006\032\007\003\010" +
    "\021\011\004\012\030\016\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\133\006\032\007\003\010" +
    "\021\011\004\012\030\016\014\001\001\000\002\001\001" +
    "\000\020\004\132\006\032\007\003\010\021\011\004\012" +
    "\030\016\014\001\001\000\020\004\131\006\032\007\003" +
    "\010\021\011\004\012\030\016\014\001\001\000\002\001" +
    "\001\000\020\004\130\006\032\007\003\010\021\011\004" +
    "\012\030\016\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\125" +
    "\006\032\007\003\010\021\011\004\012\030\016\014\001" +
    "\001\000\020\004\121\006\032\007\003\010\021\011\004" +
    "\012\030\016\014\001\001\000\002\001\001\000\020\004" +
    "\120\006\032\007\003\010\021\011\004\012\030\016\014" +
    "\001\001\000\020\004\117\006\032\007\003\010\021\011" +
    "\004\012\030\016\014\001\001\000\002\001\001\000\020" +
    "\004\116\006\032\007\003\010\021\011\004\012\030\016" +
    "\014\001\001\000\020\004\114\006\032\007\003\010\021" +
    "\011\004\012\030\016\014\001\001\000\020\004\113\006" +
    "\032\007\003\010\021\011\004\012\030\016\014\001\001" +
    "\000\002\001\001\000\020\004\034\006\032\007\003\010" +
    "\021\011\004\012\030\016\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\112\006" +
    "\032\007\003\010\021\011\004\012\030\016\014\001\001" +
    "\000\020\004\111\006\032\007\003\010\021\011\004\012" +
    "\030\016\014\001\001\000\020\004\110\006\032\007\003" +
    "\010\021\011\004\012\030\016\014\001\001\000\020\004" +
    "\107\006\032\007\003\010\021\011\004\012\030\016\014" +
    "\001\001\000\020\004\106\006\032\007\003\010\021\011" +
    "\004\012\030\016\014\001\001\000\020\004\105\006\032" +
    "\007\003\010\021\011\004\012\030\016\014\001\001\000" +
    "\004\013\104\001\001\000\004\010\103\001\001\000\020" +
    "\004\102\006\032\007\003\010\021\011\004\012\030\016" +
    "\014\001\001\000\020\004\101\006\032\007\003\010\021" +
    "\011\004\012\030\016\014\001\001\000\020\004\100\006" +
    "\032\007\003\010\021\011\004\012\030\016\014\001\001" +
    "\000\020\004\077\006\032\007\003\010\021\011\004\012" +
    "\030\016\014\001\001\000\020\004\076\006\032\007\003" +
    "\010\021\011\004\012\030\016\014\001\001\000\020\004" +
    "\075\006\032\007\003\010\021\011\004\012\030\016\014" +
    "\001\001\000\020\004\074\006\032\007\003\010\021\011" +
    "\004\012\030\016\014\001\001\000\020\004\073\006\032" +
    "\007\003\010\021\011\004\012\030\016\014\001\001\000" +
    "\020\004\072\006\032\007\003\010\021\011\004\012\030" +
    "\016\014\001\001\000\020\004\071\006\032\007\003\010" +
    "\021\011\004\012\030\016\014\001\001\000\020\004\070" +
    "\006\032\007\003\010\021\011\004\012\030\016\014\001" +
    "\001\000\020\004\067\006\032\007\003\010\021\011\004" +
    "\012\030\016\014\001\001\000\020\004\066\006\032\007" +
    "\003\010\021\011\004\012\030\016\014\001\001\000\020" +
    "\004\065\006\032\007\003\010\021\011\004\012\030\016" +
    "\014\001\001\000\004\010\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\123\006\032\007\003\010\021\011\004\012\030" +
    "\016\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\126\006\032\007\003\010\021\011\004\012\030" +
    "\016\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\134\006\032\007\003\010\021\011\004\012\030\016" +
    "\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }


	public Lexer lexer;
	private String expr;
	public IExpression RESULT;


	public ParserCup(String expr) {
		this.expr = expr;
	}



	void setResult(IExpression exp) {
		this.RESULT = exp;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // order_by_expr ::= expr ORDER_BY order_by_param_list 
            {
              OrderByExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new OrderByExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(8/*order_by_expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal_expression ::= STRING_LITERAL 
            {
              ITerminalExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new StringTerminal( l); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(7/*literal_expression*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal_expression ::= BOOLEAN_LITERAL 
            {
              ITerminalExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new BooleanTerminal( l); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(7/*literal_expression*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal_expression ::= DOUBLE_LITERAL 
            {
              ITerminalExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new DoubleTerminal( l); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(7/*literal_expression*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal_expression ::= INTEGER_LITERAL 
            {
              ITerminalExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new IntegerTerminal( l); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(7/*literal_expression*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier_literal ::= IDENTIFIER 
            {
              NameTerminal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new NameTerminal(l); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(6/*identifier_literal*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprs ::= exprs expr SEMICOLON 
            {
              List RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 es.add(e1); RESULT=es; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(11/*exprs*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<IExpression>(); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(11/*exprs*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dot_ident_expr ::= identifier_literal DOT dot_ident_expr 
            {
              DotExpression RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NameTerminal i1 = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		DotExpression i2 = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new DotExpression(i1, i2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(13/*dot_ident_expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dot_ident_expr ::= identifier_literal DOT identifier_literal 
            {
              DotExpression RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NameTerminal i1 = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		NameTerminal i2 = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new DotExpression(i1, i2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(13/*dot_ident_expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dot_expr ::= expr DOT expr 
            {
              DotExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new DotExpression(e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(12/*dot_expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= order_by_expr 
            {
              IExpression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		OrderByExpression e = (OrderByExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = e; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= FOREACH expr LEFT_CURLY_BRACKET expr RIGHT_CURLY_BRACKET 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression es = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ForEachExpression(e1, es); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr CLOSE_BY expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new CloseByExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e1; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= identifier_literal 
            {
              IExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		NameTerminal l = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = l; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= literal_expression 
            {
              IExpression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		ITerminalExpression l = (ITerminalExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = l; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr INTERSECT expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new IntersectExpression( e1,e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr IN expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new InExpression(e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr COMA expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new CommaExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr LESS_OR_EQUAL expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new LessOrEqualThanExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LESS expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new LessThanExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr WHERE expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new WhereExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr GROUP_AS identifier_literal 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		NameTerminal l = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new GroupAsExpression(l, e1 ); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr AS identifier_literal 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		NameTerminal l = (NameTerminal)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new AsExpression(l, e1 ); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= EXISTS expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new ExistExpression( e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NOT expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new NotExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS_FUNCTION expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new MinusExpression(e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= STRUCT expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new StructExpression( e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= sequence_expr 
            {
              IExpression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IUnaryExpression e = (IUnaryExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = e; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= bag_expr 
            {
              IExpression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		BagExpression e = (BagExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = e; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= MAX expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new MaxExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= MIN expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new MinExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= AVG expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new AvgExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= COUNT expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new CountExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= SUM expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new SumExpression(e1); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= FORANY expr expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new ForAnyExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= FORALL expr expr 
            {
              IExpression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new ForAllExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr JOIN expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new JoinExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= dot_expr 
            {
              IExpression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		DotExpression e = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = e; 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr UNION expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new UnionExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr AND expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new AndExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr OR expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new OrExpression( e1, e2 ); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr NOT_EQUALS expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new NotEqualsExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr EQUALS expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new EqualsExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new ModuloExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new DivideExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new MultiplyExpression(e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new MinusExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              IExpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = new PlusExpression( e1, e2); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              IExpression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).value;
		 RESULT = e; parser.setResult(e); 
              CUP$ParserCup$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression start_val = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

